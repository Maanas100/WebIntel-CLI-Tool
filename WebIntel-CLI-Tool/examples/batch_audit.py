import os
import sys
import time
from pathlib import Path

# Add the parent directory to Python path to import webintel
sys.path.append(str(Path(__file__).parent.parent))
from webintel import WebIntel, WebIntelError

def batch_audit(competitors, output_dir="batch_reports"):
    """Run WebIntel audits on multiple competitors."""
    
    # Create output directory
    Path(output_dir).mkdir(exist_ok=True)
    
    # Initialize WebIntel
    webintel = WebIntel()
    
    results = []
    
    for i, url in enumerate(competitors, 1):
        try:
            print(f"\n🔍 [{i}/{len(competitors)}] Auditing {url}")
            
            # Run audit
            report_path = webintel.audit_website(url, output_dir)
            
            results.append({
                'url': url,
                'status': 'success',
                'report': report_path
            })
            
            print(f"✅ Completed: {report_path}")
            
            # Rate limiting - be nice to websites
            time.sleep(2)
            
        except WebIntelError as e:
            print(f"❌ Failed to audit {url}: {e}")
            results.append({
                'url': url,
                'status': 'failed',
                'error': str(e)
            })
        
        except KeyboardInterrupt:
            print(f"\n🛑 Batch audit cancelled by user")
            break
    
    # Generate summary
    generate_summary(results, output_dir)
    
    return results

def generate_summary(results, output_dir):
    """Generate a summary report of the batch audit."""
    
    successful = [r for r in results if r['status'] == 'success']
    failed = [r for r in results if r['status'] == 'failed']
    
    summary = f"""# Batch Audit Summary

**Generated:** {time.strftime('%Y-%m-%d %H:%M:%S UTC', time.gmtime())}
**Total Sites:** {len(results)}
**Successful:** {len(successful)}
**Failed:** {len(failed)}

## Successful Audits

"""
    
    for result in successful:
        summary += f"- ✅ [{result['url']}]({result['report']})\n"
    
    if failed:
        summary += f"\n## Failed Audits\n\n"
        for result in failed:
            summary += f"- ❌ {result['url']} - {result.get('error', 'Unknown error')}\n"
    
    summary += f"""
## Next Steps

1. Review individual audit reports for detailed competitive insights
2. Compare pricing strategies, features, and positioning
3. Identify opportunities for differentiation
4. Plan follow-up research on key findings

---
*Generated by WebIntel Batch Audit Tool*
"""
    
    # Save summary
    summary_path = Path(output_dir) / "batch_audit_summary.md"
    with open(summary_path, 'w') as f:
        f.write(summary)
    
    print(f"\n📊 Summary report: {summary_path}")

if __name__ == "__main__":
    # Define competitors to analyze
    competitors = [
        "https://stripe.com",
        "https://square.com", 
        "https://paypal.com",
        "https://shopify.com",
        "https://woocommerce.com"
    ]
    
    print("🚀 Starting batch competitive audit")
    print(f"📋 Analyzing {len(competitors)} competitors")
    
    # Check API key
    if not os.getenv('OPENAI_API_KEY'):
        print("❌ OPENAI_API_KEY environment variable required")
        sys.exit(1)
    
    # Run batch audit
    results = batch_audit(competitors)
    
    print(f"\n🎉 Batch audit completed!")
    print(f"✅ {len([r for r in results if r['status'] == 'success'])} successful")
    print(f"❌ {len([r for r in results if r['status'] == 'failed'])} failed")
